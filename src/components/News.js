import React, { useState, useEffect } from 'react'
import NewsItem from './NewsItem'
import Spinner from './Spinner'

export default function News(props) {

  const [articles, setArticle] = useState([]);
  const [loading, setLoading] = useState(true);
  const [page, setPage] =useState(1);
  const [filteredArticle, setFilterArticle]=useState([])


  const fetchData = async (page) => {
     setLoading(true);
    try {
      const data = await fetch(`https://newsapi.org/v2/top-headlines?country=us&sortBy=publishedAt&apiKey=1ea162e9e0914d31927e9f41f2ca83cf&pageSize=12&page=${page}`);
      //if data is responded form server
      if (data.ok) {
        let parsedData = await data.json();
        setArticle(parsedData.articles);
        setFilterArticle(parsedData.articles);
      }
      // if data is not responded form server fetch from local data
      else if (data.status!==200) {
        console.log("api limit reached fetching local data..");
        let parsedData = require('../sampleoutput.json');
        setArticle(parsedData.articles);
        setFilterArticle(parsedData.articles);
      }
      
   //if any errors are generated by fetch function this block is executed
    } catch (error) {
      console.error("Failed to fetch data");
      console.log("your network might be discontinued");
      let parsedData = require('../sampleoutput.json');
      setArticle(parsedData.articles);
      setFilterArticle(parsedData.articles);

    }
    setLoading(false);
  }
  useEffect(() => {
    fetchData(page);
  }, [page]);

  let nextBtnClicked=async()=>{
     setPage(page+1);
  }

  let prevBtnClicked=async()=>{
   if(page>1){
    setPage(page-1);
   }
  }

  const handelSearch=(searchVal)=>{
    
    if(!searchVal){
      setFilterArticle(articles);
      return
    }
    const matchedArticle=articles.filter(
      (article)=>{
        return article.title.toLowerCase().includes(searchVal.toLowerCase());
      }
    )
    setFilterArticle(matchedArticle);
  };

  useEffect(()=>{
    if(articles.length>0){
        handelSearch(props.searchVar);
    }
  },[articles,props.searchVar]);

 




  return (
     <>

    
    {loading && <Spinner/>}
    {filteredArticle.length===0&&!loading&&<p style={{color:`${props.mode==='light'?'white':'black'}`, textAlign:'center'}}>No result for your search</p>}
    <div className= "mx-1" style={{display:'flex',flexWrap:'wrap'}} >
      {filteredArticle.map((element) => {
        return <div key={element.url+element.publishedAt} >
              
          <NewsItem 
              mode={props.mode}
              title={element.title} 
              description={element.description} 
              img={element.urlToImage} 
              url={element.url} 
              author={element.author} 
              publishedAt={element.publishedAt}
          />
        </div>
      })}

    </div>
    <div className='d-flex justify-content-center align-items-center'>
         <button type="button" className={`btn btn-${props.mode==='light'?'light':'dark'} mx-5`}  onClick={prevBtnClicked} disabled={page===1}>Prev</button>
         <div style={{textColor:`${props.mode==='light'?'light':'light'}`}} >{page}</div>
         <button type="button" className={`btn btn-${props.mode==='light'?'light':'dark'} mx-5`}  onClick={nextBtnClicked} >Next</button>
    </div>
    
    </>
  )
}
